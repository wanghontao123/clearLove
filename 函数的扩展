//函数参数的默认值 
        //ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面
        // function log(x, y = 'World') {
        //     console.log(x, y);
        // }
        // log('Hello') // Hello World
        // log('Hello', 'China') // Hello China
        // log('Hello', '') // Hello

        // function Point(x = 0, y = 0) {
        //     this.x = x;
        //     this.y = y;
        // }
        // const p = new Point(); p // { x: 0, y: 0 }

        //参数变量是默认声明的，所以不能用let或const再次声明。
        // function foo(x = 5) {
        //     let x = 1; // error
        //     const x = 2; // error
        // }
        
        //使用参数默认值时，函数不能有同名参数
        // 不报错
        // function foo(x, x, y) {
        //     // ...
        // }
        // // 报错
        // function foo(x, x, y = 1) {
        //     // ...
        // }
        // SyntaxError: Duplicate parameter name not allowed in this context

        //参数默认值不是传值的，而是每次都重新计算默认值表达式的值
        // let x = 99;
        // function foo(p = x + 1) {
        //     console.log(p);
        // }
        // foo() // 100
        // x = 100;
        // foo() // 101
    //rest 参数
        //ES6 引入 rest 参数（形式为...变量名）
        // function add(...values) {
        //    console.log(values); // [2, 5, 3]
           
        // }
        // add(2, 5, 3) 

        //rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。
        // 报错
        function f(a, ...b, c) {
            // ...
        }

        //rest可以放到最后边是不会报错的
        // function f(a, b, ...c) {
        //      a = 1 
        //      b = 2 
        //      c = [3, 4] 
        // }
        // f(1, 2, 3, 4)

    //严格模式
        //从 ES5 开始，函数内部可以设定为严格模式。
        // function doSomething(a, b) {
        //     'use strict';
        //     // code
        // }

        //ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。
        // 报错
        // function doSomething(a, b = a) {
        //     'use strict';
        //     // code
        // }

        // // 报错
        // const doSomething = function ({a, b}) {
        //     'use strict';
        //     // code
        // };

        // // 报错
        // const doSomething = (...a) => {
        //     'use strict';
        //     // code
        // };

        // const obj = {
        //     // 报错
        //     doSomething({a, b}) {
        //         'use strict';
        //         // code
        //     }
        // };

        //严格模式下不能用前缀0表示八进制，所以应该报错。但是实际上，JavaScript 引擎会先成功执行value = 070，然后进入函数体内部，发现需要用严格模式执行，这时才会报错

        //两种方法可以规避这种限制。
            //第一种是设定全局性的严格模式，这是合法的。
            // 'use strict';
            // function doSomething(a, b = a) {
            // // code
            // }

            //第二种是把函数包在一个无参数的立即执行函数里面。
            // const doSomething = (function () {
            //     'use strict';
            //     return function(value = 42) {
            //         return value;
            //     };
            // }());
    //箭头函数
        //ES6 允许使用“箭头”（=>）定义函数。
        // var f = v => v;
        // // 等同于
        // var f = function (v) {
        //     return v;
        // };

        //箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。
        // var f = () => 5;
        // // 等同于
        // var f = function () { return 5 };

        // var sum = (num1, num2) => num1 + num2;
        // // 等同于
        // var sum = function(num1, num2) {
        //  return num1 + num2;
        // };

        //箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。
        //var sum = (num1, num2) => { return num1 + num2; }

        //由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错
        // 报错
        //  let getTempItem = id => { id: id, name: "Temp" };
        // 不报错
        //  let getTempItem = id => ({ id: id, name: "Temp" });

        //一种特殊情况，虽然可以运行，但会得到错误的结果。
        //let foo = () => { a: 1 }; foo() // undefined

        //箭头函数的一个用处是简化回调函数
            // 正常函数写法
            // [1,2,3].map(function (x) {
            //     return x * x;
            // });
            // 箭头函数写法
            // [1,2,3].map(x => x * x);
        
        //另一个例子
            // 正常函数写法
            // var result = values.sort(function (a, b) {
            //     return a - b;
            // });
            // 箭头函数写法
            //var result = values.sort((a, b) => a - b);
        
    //函数参数的尾逗号
        //ES2017 允许函数的最后一个参数有尾逗号（trailing comma）
        //此前，函数定义和调用时，都不允许最后一个参数后面出现逗号
        // function c( param1, param2, ) {
        //  ...
        // }
        // c( 'foo', 'bar', )
        //在param2或bar后面加一个逗号，就会报错。

        // function c( param1, param2, ) {
        //  ...
        // }
        // c( 'foo', 'bar', )
    
