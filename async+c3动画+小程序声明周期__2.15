<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        .home{
            margin:100px;
            width:200px;
            height:200px;
            background: red;
            /* transform
                rotate 旋转
                scaleX X轴缩放
                scaleY Y轴缩放
                scaleZ Z轴缩放
                skew 倾斜
             */
            /*transform: rotate(45deg)*/
            /* transition
                transition-property 规定设置过渡效果的 CSS 属性的名称。
                transition-duration 规定完成过渡效果需要多少秒或毫秒。
                transition-timing-function 规定速度效果的速度曲线。
                transition-delay 定义过渡效果何时开始。
            */
            /* transition: width 2s; */
            /* animation(需要定位)
                animation-name 规定需要绑定到选择器的 keyframe 名称。
                animation-duration 规定完成动画所花费的时间，以秒或毫秒计
                animation-timing-function 	规定动画的速度曲线。
                animation-delay 规定在动画开始之前的延迟。
                animation-iteration-count 规定动画应该播放的次数。
                animation-direction 规定是否应该轮流反向播放动画。
            */
            /* position:relative;
            animation:mymove 5s infinite; */
        }
        /*.home:hover{ width:300px; }*/
        /* @keyframes mymove {
            from {left:-100px;}
            to {left:300px;}
        } */
    </style>
</head>
<body>
    <div class="home"></div>
</body>
<script>
//async
    // const asyncReadFile = async () => {
    //     const f1 = await readFile('/etc/fstab');
    //     const f2 = await readFile('/etc/shells');
    //     console.log(f1.toString());
    //     console.log(f2.toString());
    // };
    // asyncReadFile();
    
    // async function getStockPriceByName(name) {
    //     const symbol = await getStockSymbol(name);
    //     const stockPrice = await getStockPrice(symbol);
    //     return stockPrice;
    // }

    // getStockPriceByName('goog').then(function (result) {
    //     console.log(result);
    // });
    // function timeout(ms) {
    //     return new Promise((resolve) => {
    //     setTimeout(resolve, ms);
    //     });
    // }

    // async function asyncPrint(value, ms) {
    //     await timeout(ms);
    //     console.log(value);
    // }

    // asyncPrint('hello world', 50); //50毫秒后输出 'hello world'
    // async function f() {
    //     return 'hello world';
    // }
    // f().then(v => console.log(v))// "hello world"

    // async function f() {
    //     throw new Error('出错了');
    // }

    // f().then(
    //     v => console.log(v),
    //     e => console.log(e)
    // )// Error: 出错了

    // async function getTitle(url) {
    //     let response = await fetch(url);
    //     let html = await response.text();
    //     return html.match(/<title>([\s\S]+)<\/title>/i)[1];
    // }
    // getTitle('https://tc39.github.io/ecma262/').then(console.log)
    // "ECMAScript 2017 Language Specification"

    // async function f() {
    // // 等同于
    // // return 123;
    //     return await 123;
    // }
    // f().then(v => console.log(v))
    // // 123

    // function sleep(interval) {
    //     return new Promise(resolve => {
    //         setTimeout(resolve, interval);
    //     })
    // }

    // // 用法
    // async function one2FiveInAsync() {
    //     for(let i = 1; i <= 5; i++) {
    //         console.log(i);
    //         await sleep(1000);
    //     }
    // }
    // one2FiveInAsync(); // 1 2 3 4 5

    // async function f() {
    //     await Promise.reject('出错了');
    // }

    // f()
    //   .then(v => console.log(v))
    //   .catch(e => console.log(e)) // 出错了

    // async function logInOrder(urls) {
    //     // 并发读取远程URL
    //     const textPromises = urls.map(async url => {
    //         const response = await fetch(url);
    //         return response.text();
    //     });

    //     // 按次序输出
    //     for (const textPromise of textPromises) {
    //         console.log(await textPromise);
    //     }
    // }

    //const data = await fetch('https://api.example.com');
    //上面代码中，await命令独立使用，没有放在 async 函数里面，就会报错

//小程序
    // lifetimes: {
    //     created() {
    //     console.log('created - 数据初始化 -1')
    //     },
    //     attached() {
    //     console.log('attached - 渲染完成 -2')
    //     },
    //     detached() {
    //     console.log('detached - 页面销毁 -3')
    //     }
    // }

    // created () {
    //     console.log('created - 数据初始化')
    // },
    // attached () {
    //     console.log('attached - 渲染完成')
    // },
    // detached () {
    //     console.log('detached - 页面销毁')
    // }

//  /**
//    * 生命周期函数--监听页面卸载
//    */
//    onUnload: function () {
//     console.log('onUnload - 监听页面卸载')
//   },        
//    onShow: function (options) {
//     console.log('onShow 从后台进入前台显示')
//   },

//   /**
//    * 当小程序从前台进入后台，会触发 onHide
//    */
//   onHide: function () {
//     console.log('onHide 小程序从前台进入后台触发')
//   },

//   /**
//    * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息
//    */
//   onError: function (msg) {
//     console.log('onError 小程序发生脚本错误触发')
//   }

</script>
</html>
