//constructor 方法 
    //constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。
    //一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。
        // class Point {}
        // // 等同于
        // class Point {
        //     constructor() {}
        // }
    
    //constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象
        // class Foo {
        //     constructor() {
        //         return Object.create(null);
        //     }
        // }

        // new Foo() instanceof Foo
        // // false
    
    //类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行
        // class Foo {
        //     constructor() {
        //         return Object.create(null);
        //     }
        // }

        // Foo()
        // // TypeError: Class constructor Foo cannot be invoked without 'new'
    
//类的实例
    //生成类的实例的写法，与 ES5 完全一样，也是使用new命令。前面说过，如果忘记加上new，像函数那样调用Class，将会报错。
        // class Point {
        // // ...
        // }
        // // 报错
        // var point = Point(2, 3);
        // // 正确
        // var point = new Point(2, 3);
    
    //与 ES5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）
        //定义类
        // class Point {
        //     constructor(x, y) {
        //         this.x = x;
        //         this.y = y;
        //     }
        //     toString() {
        //         return '(' + this.x + ', ' + this.y + ')';
        //     }

        // }

        // var point = new Point(2, 3);

        // point.toString() // (2, 3)

        // point.hasOwnProperty('x') // true
        // point.hasOwnProperty('y') // true
        // point.hasOwnProperty('toString') // false
        // point.__proto__.hasOwnProperty('toString') // true
    
//属性表达式
    //类的属性名，可以采用表达式
        // let methodName = 'getArea';
        // class Square {
        //     constructor(length) {
        //         // ...
        //     }
        //     [methodName]() {
        //         // ...
        //     }
        // }
    
//Class 表达式
    //与函数一样，类也可以使用表达式的形式定义。
        // const MyClass = class Me {
        //     getClassName() {
        //         return Me.name;
        //     }
        // };
    
    //这个类的名字是Me，但是Me只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用MyClass引用。
        // let inst = new MyClass();
        // inst.getClassName() // Me
        // Me.name // ReferenceError: Me is not defined
    
    //如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。
        //const MyClass = class { /* ... */ };
    
//静态方法 
    //如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。
        // class Foo {
        //     static classMethod() {
        //         return 'hello';
        //     }
        // }
        // Foo.classMethod() // 'hello'
        // var foo = new Foo();
        // foo.classMethod()
        // // TypeError: foo.classMethod is not a function
    
    //如果静态方法包含this关键字，这个this指的是类，而不是实例。
        // class Foo {
        //     static bar() {
        //         this.baz();
        //     }
        //     static baz() {
        //         console.log('hello');
        //     }
        //     baz() {
        //         console.log('world');
        //     }
        // }
        // Foo.bar() // hello
    
    //父类的静态方法，可以被子类继承。
        // class Foo {
        //     static classMethod() {
        //         return 'hello';
        //     }
        // }
        // class Bar extends Foo {}
        // Bar.classMethod() // 'hello'
    
    //静态方法也是可以从super对象上调用的。
        // class Foo {
        //     static classMethod() {
        //         return 'hello';
        //     }
        // }
        // class Bar extends Foo {
        //     static classMethod() {
        //         return super.classMethod() + ', too';
        //     }
        // }
        // Bar.classMethod() // "hello, too"
    
//实例属性的新写法
    //实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层。
        // class IncreasingCounter {
        //     constructor() {
        //         this._count = 0;
        //     }
        //     get value() {
        //         console.log('Getting the current value!');
        //         return this._count;
        //     }
        //     increment() {
        //         this._count++;
        //     }
        // }
    
    //实例属性this._count定义在constructor()方法里面。另一种写法是，这个属性也可以定义在类的最顶层，其他都不变。
        class IncreasingCounter {
            _count = 0;
            get value() {
                console.log('Getting the current value!');
                return this._count;
            }
            increment() {
                this._count++;
            }
        }

//静态属性
    //静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。
        // class Foo {}
        // Foo.prop = 1;
        // Foo.prop // 1
    
    //这个新写法大大方便了静态属性的表达
        // 老写法
        // class Foo {
        // // ...
        // }
        // Foo.prop = 1;

        // // 新写法
        // class Foo {
        //     static prop = 1;
        // }
