<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
</body>
<script>
//promise.all
    //Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。
    // const p1 = Promise.resolve(1)
    // const p2 = Promise.resolve(2)
    // const p3 = Promise.resolve(3)
    // Promise.all([p1, p2, p3])
    //     .then(res => console.log(res)) // [1, 2, 3]
    // const p1 = new Promise((resolve, reject) => {
    //     resolve(1)
    // })

    // const p2 = new Promise((resolve, reject) => {
    //     resolve(2)
    // })

    // const p3 = new Promise((resolve, reject) => {
    //     reject('404')
    // })
    // Promise.all([p1, p2, p3])
    //      .then(res => console.log(res)) //报错
    //      .catch(err => console.log(err)) //输出 404
//promise.resolve
    //Promise.resolve(1) 等价于 newPromise((resolve, reject) => {resolve(1)})
    // const p1 = Promise.resolve(1)
    //     p1.then(res => console.log(res))
    //Promise.resolve将不做任何修改、原封不动地返回这个实例。
    /*
        参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved
    */
//promise.reject
    // Promise.reject()方法也会返回一个新的 Promise 实例，该实例的状态为rejected
    // const p1 = Promise.reject('错误') 
    //     p1.catch(err => console.log(err)) //错误 
    //只能使用catch 用then会报错
//应用
    //加载图片
    // const preloadImage = function (path) {
    //     return new Promise((resolve, reject) => {
    //         const image = new Image();
    //         image.onload  = resolve;
    //         image.onerror = reject;
    //         image.src = path;
    //     });
    // };
    // function getFoo () {
    //     return new Promise(function (resolve, reject){
    //         resolve('foo');
    //     });
    // }

    // const g = function* () {
    //     try {
    //         const foo = yield getFoo();
    //         console.log(foo);
    //     } catch (e) {
    //         console.log(e);
    //     }
    // };

    // function run (generator) {
    //     const it = generator();

    //     function go(result) {
    //         if (result.done) return result.value;

    //         return result.value.then(function (value) {
    //         return go(it.next(value));
    //         }, function (error) {
    //         return go(it.throw(error));
    //         });
    //     }

    //     go(it.next());
    // }
    //run(g);
    /*
        Generator 函数g之中，有一个异步操作getFoo，它返回的就是一个Promise对象。函数run用来处理这个Promise对象，并调用下一个next方法。
    */
//小程序
    //父组件
    // <view>
    // <button 
    //     bind:tap="onClick"  
    //     data-name="{{obj}}"
    //     data-xxx="{{obj}}"
    // >
    //     点我
    // </button>
    // </view>
    // onClick (evt) {
    //     const value = evt.target.dataset
    //     const type = Object.prototype.toString.call(value)
    //     console.log(type)
    //     console.log(evt.target.dataset) 
    // },
    
    //子组件
    // <image 
    //       src="/assets/01.jpg" 
    //       mode="aspectFill" 
    //       bind:tap="onTap"
    // />

    // methods: {
    //     onTap() {
    //     this.triggerEvent('onClick', {
    //         name: '王红涛',
    //         age: 20
    //     })
    //     }
    // }

</script>
</html>
