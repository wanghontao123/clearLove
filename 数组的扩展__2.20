//扩展运算符
    //含义
        //扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。
        // console.log(...[1, 2, 3])
        // // 1 2 3

        // console.log(1, ...[2, 3, 4], 5)
        // // 1 2 3 4 5

        // [...document.querySelectorAll('div')]
        // // [<div>, <div>, <div>]

        //运算符主要用于函数调用
        // function push(array, ...items) {
        //     array.push(...items);
        // }
        // function add(x, y) {
        //     return x + y;
        // }
        // const numbers = [4, 38];
        // add(...numbers) // 42

        //扩展运算符与正常的函数参数可以结合使用
        // function f(v, w, x, y, z) { }
        // const args = [0, 1];
        // f(-1, ...args, 2, ...[3]);

        //扩展运算符后面还可以放置表达式
        // const arr = [
        //     ...(x > 0 ? ['a'] : []),
        //     'b',
        // ];

//数组实例的 find() 和 findIndex()
    //数组实例的find方法，找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined
        //[1, 4, -5, 10].find((n) => n < 0) // -5

        //找出数组中第一个大于 9 的成员。
        // [1, 5, 10, 15].find(function(value, index, arr) {
        //     return value > 9;
        // }) // 10

    //数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1
        // [1, 5, 10, 15].findIndex(function(value, index, arr) {
        //     return value > 9;
        // }) // 2

//数组实例的 includes()
    //Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。
    // [1, 2, 3].includes(2)     // true
    // [1, 2, 3].includes(4)     // false
    // [1, 2, NaN].includes(NaN) // true

    //该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。
    // [1, 2, 3].includes(3, 3);  // false
    // [1, 2, 3].includes(3, -1); // true

    //includes使用的是不一样的判断算法，就没有这个问题。
    //[NaN].includes(NaN) // true

//数组实例的 flat()，flatMap()
    //Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响，默认为1。
        //[1, 2, [3, 4]].flat()   // [1, 2, 3, 4]
        //[1, 2, [3, [4, 5]]].flat() // [1, 2, 3, [4, 5]] 
        //[1, 2, [3, [4, 5]]].flat(2) // [1, 2, 3, 4, 5] //拉平2层

        //如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。
        //[1, [2, [3]]].flat(Infinity) // [1, 2, 3]
    
        //原数组有空位，flat()方法会跳过空位。
        //[1, 2, , 4, 5].flat() // [1, 2, 4, 5]

    //flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。
        //[2, 3, 4].flatMap((x) => [x, x * 2]) // [2, 4, 3, 6, 4, 8]

        //flatMap()只能展开一层数组
        // 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()
        //[1, 2, 3, 4].flatMap(x => [[x * 2]])
        // [[2], [4], [6], [8]]

        //flatMap()方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。
        // arr.flatMap(function callback(currentValue[, index[, array]]) {
        //     // ...
        // }[, thisArg])
