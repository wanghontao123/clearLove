//编辑风格
    //块级作用域
        //(1)let 取代 var
             //ES6 提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。
             //var命令存在变量提升效用，let命令没有这个问题。
             //  if (true) {
             //     console.log(x); // ReferenceError
             //     let x = 'hello';
             // }
        //(2)全局常量和线程安全 
            //在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。
            // // bad
            // var a = 1, b = 2, c = 3;
            // // good
            // const a = 1;
            // const b = 2;
            // // best
            // const [a, b, c] = [1, 2, 3];
    //字符串
        //静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。
        // // bad
        // const a = "foobar";
        // const b = 'foo' + a + 'bar';
        // // acceptable
        // const c = `foobar`;
        // // good
        // const a = 'foobar';
        // const b = `foo${a}bar`;
    //结构估值
        //使用数组成员对变量赋值时，优先使用解构赋值。
            // const arr = [1, 2, 3, 4];
            // // bad
            // const first = arr[0];
            // const second = arr[1];
            // // good
            // const [first, second] = arr;

        //函数的参数如果是对象的成员，优先使用解构赋值。
            // bad
            // function getFullName(user) {
            //     const firstName = user.firstName;
            //     const lastName = user.lastName;
            // }
            // good
            // function getFullName(obj) {
            //     const { firstName, lastName } = obj;
            // }
            // best
            // function getFullName({ firstName, lastName }) {
            // }

        //如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。
            // // bad
            // function processInput(input) {
            //     return [left, right, top, bottom];
            // }
            // // good
            // function processInput(input) {
            //     return { left, right, top, bottom };
            // }
            // const { left, right } = processInput(input);
    //对象
        //单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。
            // bad
            // const a = { k1: v1, k2: v2, };
            // const b = {
            //     k1: v1,
            //     k2: v2
            // };
            // // good
            // const a = { k1: v1, k2: v2 };
            // const b = {
            //     k1: v1,
            //     k2: v2,
            // };
        
        //对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。
            // // bad
            // const a = {};
            // a.x = 3;
            // // if reshape unavoidable
            // const a = {};
            // Object.assign(a, { x: 3 });
            // // good
            // const a = { x: null };
            // a.x = 3;

    //数组
        //使用扩展运算符（...）拷贝数组。
            // bad
            // const len = items.length;
            // const itemsCopy = [];
            // let i;
            // for (i = 0; i < len; i++) {
            //    itemsCopy[i] = items[i];
            // }
            // good
            // const itemsCopy = [...items];

        //使用 Array.from 方法，将类似数组的对象转为数组
            //const foo = document.querySelectorAll('.foo');
            //const nodes = Array.from(foo);
    
    //函数
        //立即执行函数可以写成箭头函数的形式。
            // (() => {
            //     console.log('Welcome to the Internet.');
            // })();
        
        //那些使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。
            // // bad
            // [1, 2, 3].map(function (x) {
            //     return x * x;
            // });
            // // good
            // [1, 2, 3].map((x) => {
            //     return x * x;
            // });
            // // best
            // [1, 2, 3].map(x => x * x);
        
        //使用默认值语法设置函数参数的默认值。
            // // bad
            // function handleThings(opts) {
            //     opts = opts || {};
            // }
            // // good
            // function handleThings(opts = {}) {
            // // ...
            // }
        
    //Map循环
        //注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要key: value的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。
            //let map = new Map(arr);
            // for (let key of map.keys()) {
            //     console.log(key);
            // }

            // for (let value of map.values()) {
            //     console.log(value);
            // }

            // for (let item of map.entries()) {
            //     console.log(item[0], item[1]);
            // }
    
    //Class
        //总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解。
            // bad
            // function Queue(contents = []) {
            //     this._queue = [...contents];
            // }
            // Queue.prototype.pop = function() {
            //     const value = this._queue[0];
            //     this._queue.splice(0, 1);
            //     return value;
            // }

            // // good
            // class Queue {
            //     constructor(contents = []) {
            //         this._queue = [...contents];
            //     }
            //     pop() {
            //         const value = this._queue[0];
            //         this._queue.splice(0, 1);
            //         return value;
            //     }
            // }
        
        //使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。
            // bad
            // const inherits = require('inherits');
            //     function PeekableQueue(contents) {
            //     Queue.apply(this, contents);
            // }
            // inherits(PeekableQueue, Queue);
            // PeekableQueue.prototype.peek = function() {
            //     return this._queue[0];
            // }

            // // good
            // class PeekableQueue extends Queue {
            //     peek() {
            //         return this._queue[0];
            //     }
            // }
    //模块
        //Module 语法是 JavaScript 模块的标准写法，坚持使用这种写法。使用import取代require。
            // bad
            // const moduleA = require('moduleA');
            // const func1 = moduleA.func1;
            // const func2 = moduleA.func2;

            // // good
            // import { func1, func2 } from 'moduleA';
        
        //如果模块默认输出一个函数，函数名的首字母应该小写。
            // function makeStyleGuide() {
            // }
            // export default makeStyleGuide;
        
        //如果模块默认输出一个对象，对象名的首字母应该大写。
            // const StyleGuide = {
            //     es6: {
            //     }
            // };
            // export default StyleGuide;
    //ESLint 的使用 
        //ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。

        //首先，安装 ESLint。
            //npm i -g eslint
        
        //然后，安装 Airbnb 语法规则，以及 import、a11y、react 插件。
            // npm i -g eslint-config-airbnb
            // npm i -g eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react
        
        //最后，在项目的根目录下新建一个.eslintrc文件，配置 ESLint。
            // {
            //     "extends": "eslint-config-airbnb"
            // }
