//变量的解构赋值
    //数组的解构赋值
        //以前，为变量赋值，只能直接指定值。
            // let a = 1;
            // let b = 2;
            // let c = 3;
        //ES6 允许写成下面这样。
            //let [a, b, c] = [1, 2, 3];

        //只要等号两边的模式相同，左边的变量就会被赋予对应的值
            // let [foo, [[bar], baz]] = [1, [[2], 3]];
            // foo // 1
            // bar // 2
            // baz // 3

            //let [ , , third] = ["foo", "bar", "baz"];
            // third // "baz"

            // let [x, , y] = [1, 2, 3];
            // x // 1
            // y // 3

            // let [head, ...tail] = [1, 2, 3, 4];
            // head // 1
            // tail // [2, 3, 4]

            // let [x, y, ...z] = ['a'];
            // x // "a"
            // y // undefined
            // z // []
        
        //解构不成功，变量的值就等于undefined。
            //let [foo] = [];
            //let [bar, foo] = [1];
            //两种情况都属于解构不成功，foo的值都会等于undefined
        
        //等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功
            // let [x, y] = [1, 2, 3];
            // x // 1
            // y // 2

            // let [a, [b], d] = [1, [2, 3], 4];
            // a // 1
            // b // 2
            // d // 4
        
        //等号的右边不是数组（或者严格地说，不是可遍历的结构),将会报错
            // 报错
            let [foo] = 1;
            let [foo] = false;
            let [foo] = NaN;
            let [foo] = undefined;
            let [foo] = null;
            let [foo] = {};
        
        // Set 结构，也可以使用数组的解构赋值
            // let [x, y, z] = new Set(['a', 'b', 'c']);
            // x // "a"
        
        //默认值
        //解构赋值允许指定默认值。
            //let [foo = true] = [];
            // foo // true

            // let [x, y = 'b'] = ['a']; // x='a', y='b'
            // let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'

        //ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。
            // let [x = 1] = [undefined];
            // x // 1

            // let [x = 1] = [null];
            // x // null
        
        //默认值可以引用解构赋值的其他变量，但该变量必须已经声明。
            // let [x = 1, y = x] = [];     // x=1; y=1
            // let [x = 1, y = x] = [2];    // x=2; y=2
            // let [x = 1, y = x] = [1, 2]; // x=1; y=2
            // let [x = y, y = 1] = [];     // ReferenceError: y is not defined

    //对象的解构赋值
        //简介
            //解构不仅可以用于数组，还可以用于对象。
                // let { foo, bar } = { foo: 'aaa', bar: 'bbb' };
                // foo // "aaa"
                // bar // "bbb"
                
                // let { bar, foo } = { foo: 'aaa', bar: 'bbb' };
                // foo // "aaa"
                // bar // "bbb"

                // let { baz } = { foo: 'aaa', bar: 'bbb' };
                // baz // undefined
            
            //解构失败，变量的值等于undefined。
                // let {foo} = {bar: 'baz'};
                // foo // undefined
            
            //如果变量名与属性名不一致，必须写成下面这样。
                // let { foo: baz } = { foo: 'aaa', bar: 'bbb' };
                // baz // "aaa"

                // let obj = { first: 'hello', last: 'world' };
                // let { first: f, last: l } = obj;
                // f // 'hello'
                // l // 'world'
            
            //对象的解构也可以指定默认值。
                // var {x = 3} = {}; //  x // 3

                // var {x, y = 5} = {x: 1}; //x: 1, y:5
                
                // var {x: y = 3} = {}; // y // 3
            
                // var {x: y = 3} = {x: 5}; //y // 5
            
            //默认值生效的条件是，对象的属性值严格等于undefined。
                //var {x = 3} = {x: undefined};
                // x // 3

                // var {x = 3} = {x: null};
                // x // null
            
    //字符串的解构赋值 
        //字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。
            // const [a, b, c, d, e] = 'hello';
            // a // "h"
            // b // "e"
            // c // "l"
            // d // "l"
            // e // "o"
        
        //类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值
            // let {length : len} = 'hello';
            // len // 5

    //数值和布尔值的解构赋值
        //解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。
            // let {toString: s} = 123;
            // s === Number.prototype.toString // true

            // let {toString: s} = true;
            // s === Boolean.prototype.toString // true

        //解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。
            // let { prop: x } = undefined; // TypeError
            // let { prop: y } = null; // TypeError

    //函数参数的解构赋值 
        //函数的参数也可以使用解构赋值。
            // function add([x, y]){
            //     return x + y;
            // }
            // add([1, 2]); // 3
        
            //[[1, 2], [3, 4]].map(([a, b]) => a + b); // [ 3, 7 ]

        //函数参数的解构也可以使用默认值
            // function move({x = 0, y = 0} = {}) {
            //     return [x, y];
            // }

            // move({x: 3, y: 8}); // [3, 8]
            // move({x: 3}); // [3, 0]
            // move({}); // [0, 0]
            // move(); // [0, 0]

            // function move({x, y} = { x: 0, y: 0 }) {
            //     return [x, y];
            // }
            // move({x: 3, y: 8}); // [3, 8]
            // move({x: 3}); // [3, undefined]
            // move({}); // [undefined, undefined]
            // move(); // [0, 0]

        //undefined就会触发函数参数的默认值。
            // [1, undefined, 3].map((x = 'yes') => x);
            // // [ 1, 'yes', 3 ]
        
    //圆括号问题
        //不能使用圆括号的情况
            //变量声明语句
                // 全部报错
                // let [(a)] = [1];
                // let {x: (c)} = {};
                // let ({x: c}) = {};
                // let {(x: c)} = {};
                // let {(x): c} = {};
                // let { o: ({ p: p }) } = { o: { p: 2 } };

            //函数参数
                // 报错
                // function f([(z)]) { return z; }
                // // 报错
                // function f([z,(x)]) { return x; }
            
            //赋值语句的模式
                // 全部报错
                // ({ p: a }) = { p: 42 };
                // ([a]) = [5];

        //可以使用圆括号的情况
            //可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。
                // [(b)] = [3]; // 正确
                // ({ p: (d) } = {}); // 正确
                // [(parseInt.prop)] = [3]; // 正确
    //用途
        //交换变量的值
            // let x = 1;
            // let y = 2;

            // [x, y] = [y, x];

        //从函数返回多个值
            // 返回一个数组
                // function example() {
                //  return [1, 2, 3];
                // }
                // let [a, b, c] = example();

            // 返回一个对象
                // function example() {
                //     return {
                //         foo: 1,
                //         bar: 2
                //     };
                // }
                // let { foo, bar } = example();

        //函数参数的定义
            // 参数是一组有次序的值
            // function f([x, y, z]) { ... }
            // f([1, 2, 3]);

            // // 参数是一组无次序的值
            // function f({x, y, z}) { ... }
            // f({z: 3, y: 2, x: 1});

        //提取 JSON 数据
            //let jsonData = {
            //     id: 42,
            //     status: "OK",
            //     data: [867, 5309]
            // };

            // let { id, status, data: number } = jsonData;
            // console.log(id, status, number);
            // 42, "OK", [867, 5309]
        
        //函数参数的默认值
            // jQuery.ajax = function (url, {
            //     async = true,
            //     beforeSend = function () {},
            //     cache = true,
            //     complete = function () {},
            //     crossDomain = false,
            //     global = true,
            //     // ... more config
            //     } = {}) {
            //     // ... do stuff
            // };
        
        //遍历 Map 结构
            // const map = new Map();
            // map.set('first', 'hello');
            // map.set('second', 'world');

            // for (let [key, value] of map) {
            // console.log(key + " is " + value);
            // }
            // // first is hello
            // // second is world
        
        //输入模块的指定方法
            //const { SourceMapConsumer, SourceNode } = require("source-map");
