<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
</body>
<script>
    //简介
        /*
            promise的状态分为三种(进行中，已完成，已失败),
            一旦状态改变，就不会再变，任何时候都可以得到这个结果。
            它会接收一个函数作为参数，该函数的两个参数分别是 resolve和reject 
        */
    //Promise 的含义
    // const promise = new Promise(function(resolve, reject) {
    //     resolve(2)
    //     reject('错误了')
    // });
    //     promise
    //         .then(res => console.log(res)) 
    //         .catch(err => console.log(err))
    //     //结果是2 状态一旦改变就不会再次发生改变
    //基本用法
    // let promise = new Promise(function(resolve, reject) {
    //     console.log('Promise');
    //     resolve();
    // });

    // promise.then(function() {
    //     console.log('resolved.');
    // });
    // console.log('Hi!');
    // Promise
    // Hi!
    // resolved
    //Promise 新建后立即执行，所以首先输出的是Promise。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。

    //Promise.prototype.then()
        //Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。
    // const promise = new Promise(function(resolve, reject) {
    //     resolve(2)
    // });
    //     promise
    //         .then(res => console.log(res))
    //         .then(res => console.log(res))
    //         .then(res => console.log(res)) //结果是 2 unde unde
    //         //第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。没有返回值是undefined 要想后边的then也能输出 前边必须有返回值
    //Promise.prototype.catch()
        //promise中如果该对象状态变为resolved，则会调用then方法指定的回调函数，状态就会变为rejected，就会调用catch方法指定的回调函数，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。
        const promise = new Promise(function(resolve, reject) {
            reject('错误了')
        });
        promise
            .catch(err => console.log(err)) //结果是 错误了
            //promise抛出一个错误，就被catch方法指定的回调函数捕获
    //小程序
        //home页面
        // <view wx:for="{{list}}">
        //     <navigator open-type="navigateTo" 
        //       url="/pages/list/list?name={{item.msg.name}}&
        //             title={{item.msg.title}}"
        //     >
        //         <Images name="{{item.msg.name}}"/>
        //     </navigator>
        // </view>

        //home 数据
        //     list: [
        //   {
        //     id: 0,
        //     imgUrl: '/assets/01.jpg',
        //     msg: {
        //       name: '喜羊羊',
        //       title: '聪明聪慧，脑子好使'
        //     }
        //   },
        //   {
        //     id: 1,
        //     imgUrl: '/assets/01.jpg',
        //     msg: {
        //       name: '美羊羊',
        //       title: '美丽动人，落落大方'
        //     }
        //   }]

        //子组件
        // <view class="image">
        //     <image src="/assets/01.jpg" mode="aspectFill"/>
        //     <text>{{name}}</text>
        // </view>

        //子组件接收数据
        // name: {
        //     type: 'String',
        //     value: ''
        // },

        //跳转到详情页
        // <view class="pages-list">
        //     <Images />
        //     <view>
        //         <view>{{obj.name}}</view>
        //         <view>{{obj.title}}</view>
        //     </view>
        // </view>

        //详情页js
        // data: {
        //     obj: {}
        // },

        // /**
        //  * 生命周期函数--监听页面加载
        //  */
        // onLoad: function (options) {
        //     this.setData({
        //     obj: options
        //     })
        // },
    </script>
</html>
